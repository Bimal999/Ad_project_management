# -*- coding: utf-8 -*-
"""Copy of Ad_project_assignment.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1DiEri7m4zWzxcBy2c05oF2n2ADjQPW13
"""

# Commented out IPython magic to ensure Python compatibility.
# %%bash
# gdown 1LIRkum4Lnn7ZdToKjnls-bd0MBjPqWmU

import pandas as pd
df=pd.read_csv('ads.csv')

df.head()

df.info()

df.isnull().sum()

df.describe()

import matplotlib.pyplot as plt
import seaborn as sns

df.boxplot()

df.columns

# Plotting
fig, ax = plt.subplots(3, 1, figsize=(5, 8))

# TV vs Sales
ax[0].scatter(df['TV'], df['sales'], color='blue')
ax[0].set_xlabel('TV Ad Spending')
ax[0].set_ylabel('Sales')
ax[0].set_title('TV Ad Spending vs Sales')

# Radio vs Sales
ax[1].scatter(df['radio'], df['sales'], color='red')
ax[1].set_xlabel('Radio Ad Spending')
ax[1].set_ylabel('Sales')
ax[1].set_title('Radio Ad Spending vs Sales')

# Newspaper vs Sales
ax[2].scatter(df['newspaper'], df['sales'], color='green')
ax[2].set_xlabel('Newspaper Ad Spending')
ax[2].set_ylabel('Sales')
ax[2].set_title('Newspaper Ad Spending vs Sales')

plt.tight_layout()
plt.show()

# Calculate correlation between each type of advertising and sales
correlations = df[['TV', 'radio', 'newspaper', 'sales']].corr()['sales'].drop('sales')
print("Correlations with Sales:")
print(correlations)

"""This shows that while spending the advertising amount on tv add result more sales but newspaper ad spending have less sales result"""

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.tree import DecisionTreeRegressor
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error, r2_score

# Prepare the data
X = df[['TV', 'radio', 'newspaper']]
y = df['sales']

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

model_lr=LinearRegression()
model_lr.fit(X_train,y_train)

model_tree=DecisionTreeRegressor()
model_tree.fit(X_train,y_train)

model_forest=RandomForestRegressor()
model_forest.fit(X_train,y_train)

# Function to compute metrics and return results in a structured format
def compute_results(model, X_test, y_test):
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    return {
        'Model': str(model),
        'MSE': mse,
        'R2': r2
    }

# Compute results for each model
results = []
results.append(compute_results(model_lr, X_test, y_test))
results.append(compute_results(model_tree, X_test, y_test))
results.append(compute_results(model_forest, X_test, y_test))

# Convert results to DataFrame for easier comparison
df_results = pd.DataFrame(results)

# Display the results
print("Comparison of Model Performance:")
print(df_results)

"""From above three different model RandomForest Regression is more accurate"""

